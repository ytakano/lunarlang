import type.a as t

struct s0 {
    a : [u32 * 3]
}

struct s1 {
    b : s0
    c : uniq<s0>
}

func f(arg : weak<[u32 * 3]>) { // weak reference
    let v0 : stack<s0> = s0(*arg)                      // stack
    let v1 : stack<[bool * 3]> = [true, false, true]   // stack
    let v2 : uniq<s0> = uniq<s0>(*arg)                 // heap, linear type
    let v3 : shared<s0> = shared<s0>(*arg)             // shared
    let v4 : stack<[s0]> = [*s0(*arg), *s0(*arg)]      // vector of s0
    let v5 : stack<s1> = s1(*s0(*arg), uniq<s0>(*arg))
    let v6 : stack<[u32 * 2]> = [10, 20]
    let v7 : uniq<[u32]> = uniq<u32>(*[10, 20])
    let v8 : stack<[u32 * 3 * 2]> = [1, 2, 3, 4, 5, 6] // multi dimensional vector

    v8[0][1] // accessing to the multi dimensional vector

    g(*v2) // pass-by-value
}

// pass-by-value
func g(val : s0) {
    val
}

func h(arg: weak<[u32 * 3]>) {
    s0(*arg) // OK
    s0(arg)  // must be error
}
